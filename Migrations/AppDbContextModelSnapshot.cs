// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskManagementSystem.Data;

#nullable disable

namespace TaskManagementSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaskManagementSystem.Models.Comment", b =>
                {
                    b.Property<Guid>("Comment_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Comment_Reminder_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("Comment_TaskTask_Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment_Text")
                        .HasColumnType("text");

                    b.Property<int>("Comment_Type")
                        .HasColumnType("integer");

                    b.HasKey("Comment_Id");

                    b.HasIndex("Comment_TaskTask_Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Task", b =>
                {
                    b.Property<Guid>("Task_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Task_Creation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Task_Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("Task_Required")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Task_Title")
                        .HasColumnType("text");

                    b.HasKey("Task_Id");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TaskManagementSystem.Models.User", b =>
                {
                    b.Property<Guid>("User_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("User_Name")
                        .HasColumnType("text");

                    b.Property<string>("User_Position")
                        .HasColumnType("text");

                    b.HasKey("User_Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TaskUser", b =>
                {
                    b.Property<Guid>("Task_AssignessUser_Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("User_TasksTask_Id")
                        .HasColumnType("uuid");

                    b.HasKey("Task_AssignessUser_Id", "User_TasksTask_Id");

                    b.HasIndex("User_TasksTask_Id");

                    b.ToTable("TaskUser");
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Comment", b =>
                {
                    b.HasOne("TaskManagementSystem.Models.Task", "Comment_Task")
                        .WithMany("Task_Comments")
                        .HasForeignKey("Comment_TaskTask_Id");

                    b.Navigation("Comment_Task");
                });

            modelBuilder.Entity("TaskUser", b =>
                {
                    b.HasOne("TaskManagementSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("Task_AssignessUser_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManagementSystem.Models.Task", null)
                        .WithMany()
                        .HasForeignKey("User_TasksTask_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Task", b =>
                {
                    b.Navigation("Task_Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
